import sys
# 100 => 3bit (3 character)
#10010010 => 8bit (8character) = 1 byte

#   13 รท 2 = 6  remainder 1    4.
#    6 รท 2 = 3  remainder 0    3.   
#    3 รท 2 = 1  remainder 1    2.
#    1 รท 2 = 0  remainder 1    1.

# 1.2.3.4  > 1101 = 13             https://www.rapidtables.com/convert/number/binary-to-hex.html


x = "1101"  # binary 
decimal_value = int(x, 2) 
print(decimal_value)

y = 0b1101  # binary literal
print(y)
#-------------------------------
v=13
print(sys.getsizeof(v))

vdec=0b1101
print(sys.getsizeof(vdec))

vdec2=0b000100010100
print(sys.getsizeof(vdec2))

#------------------------------

# +-----+-----+-----+--------+------+
# | Dec | Hex | Oct | Bin    | Char |
# +-----+-----+-----+--------+------+
# | 32  | 20  | 40  | 100000 | ' '  |
# | 33  | 21  | 41  | 100001 | '!'  |
# | 34  | 22  | 42  | 100010 | '"'  |
# | 35  | 23  | 43  | 100011 | '#'  |
# | 36  | 24  | 44  | 100100 | '$'  |
# | 37  | 25  | 45  | 100101 | '%'  |
# | 38  | 26  | 46  | 100110 | '&'  |
# | 39  | 27  | 47  | 100111 | '''  |
# | 40  | 28  | 50  | 101000 | '('  |
# | 41  | 29  | 51  | 101001 | ')'  |
# | 42  | 2A  | 52  | 101010 | '*'  |
# | 43  | 2B  | 53  | 101011 | '+'  |
# | 44  | 2C  | 54  | 101100 | ','  |
# | 45  | 2D  | 55  | 101101 | '-'  |
# | 46  | 2E  | 56  | 101110 | '.'  |
# | 47  | 2F  | 57  | 101111 | '/'  |
# | 48  | 30  | 60  | 110000 | '0'  |
# | 49  | 31  | 61  | 110001 | '1'  |
# | 50  | 32  | 62  | 110010 | '2'  |
# | 51  | 33  | 63  | 110011 | '3'  |
# | 52  | 34  | 64  | 110100 | '4'  |
# | 53  | 35  | 65  | 110101 | '5'  |
# | 54  | 36  | 66  | 110110 | '6'  |
# | 55  | 37  | 67  | 110111 | '7'  |
# | 56  | 38  | 70  | 111000 | '8'  |
# | 57  | 39  | 71  | 111001 | '9'  |
# | 58  | 3A  | 72  | 111010 | ':'  |
# | 59  | 3B  | 73  | 111011 | ';'  |
# | 60  | 3C  | 74  | 111100 | '<'  |
# | 61  | 3D  | 75  | 111101 | '='  |
# | 62  | 3E  | 76  | 111110 | '>'  |
# | 63  | 3F  | 77  | 111111 | '?'  |
# | 64  | 40  | 100 | 1000000 | '@' |
# | 65  | 41  | 101 | 1000001 | 'A' |
# | 66  | 42  | 102 | 1000010 | 'B' |
# | 67  | 43  | 103 | 1000011 | 'C' |
# | 68  | 44  | 104 | 1000100 | 'D' |
# | 69  | 45  | 105 | 1000101 | 'E' |
# | 70  | 46  | 106 | 1000110 | 'F' |
# | 71  | 47  | 107 | 1000111 | 'G' |
# | 72  | 48  | 110 | 1001000 | 'H' |
# | 73  | 49  | 111 | 1001001 | 'I' |
# | 74  | 4A  | 112 | 1001010 | 'J' |
# | 75  | 4B  | 113 | 1001011 | 'K' |
# | 76  | 4C  | 114 | 1001100 | 'L' |
# | 77  | 4D  | 115 | 1001101 | 'M' |
# | 78  | 4E  | 116 | 1001110 | 'N' |
# | 79  | 4F  | 117 | 1001111 | 'O' |
# | 80  | 50  | 120 | 1010000 | 'P' |
# | 81  | 51  | 121 | 1010001 | 'Q' |
# | 82  | 52  | 122 | 1010010 | 'R' |
# | 83  | 53  | 123 | 1010011 | 'S' |
# | 84  | 54  | 124 | 1010100 | 'T' |
# | 85  | 55  | 125 | 1010101 | 'U' |
# | 86  | 56  | 126 | 1010110 | 'V' |
# | 87  | 57  | 127 | 1010111 | 'W' |
# | 88  | 58  | 130 | 1011000 | 'X' |
# | 89  | 59  | 131 | 1011001 | 'Y' |
# | 90  | 5A  | 132 | 1011010 | 'Z' |
# | 91  | 5B  | 133 | 1011011 | '[' |
# | 92  | 5C  | 134 | 1011100 | '\' |
# | 93  | 5D  | 135 | 1011101 | ']' |
# | 94  | 5E  | 136 | 1011110 | '^' |
# | 95  | 5F  | 137 | 1011111 | '_' |
# | 96  | 60  | 140 | 1100000 | '`' |
# | 97  | 61  | 141 | 1100001 | 'a' |
# | 98  | 62  | 142 | 1100010 | 'b' |
# | 99  | 63  | 143 | 1100011 | 'c' |
# |100  | 64  | 144 | 1100100 | 'd' |
# |101  | 65  | 145 | 1100101 | 'e' |
# |102  | 66  | 146 | 1100110 | 'f' |
# |103  | 67  | 147 | 1100111 | 'g' |
# |104  | 68  | 150 | 1101000 | 'h' |
# |105  | 69  | 151 | 1101001 | 'i' |
# |106  | 6A  | 152 | 1101010 | 'j' |
# |107  | 6B  | 153 | 1101011 | 'k' |
# |108  | 6C  | 154 | 1101100 | 'l' |
# |109  | 6D  | 155 | 1101101 | 'm' |
# |110  | 6E  | 156 | 1101110 | 'n' |
# |111  | 6F  | 157 | 1101111 | 'o' |
# |112  | 70  | 160 | 1110000 | 'p' |
# |113  | 71  | 161 | 1110001 | 'q' |
# |114  | 72  | 162 | 1110010 | 'r' |
# |115  | 73  | 163 | 1110011 | 's' |
# |116  | 74  | 164 | 1110100 | 't' |
# |117  | 75  | 165 | 1110101 | 'u' |
# |118  | 76  | 166 | 1110110 | 'v' |
# |119  | 77  | 167 | 1110111 | 'w' |
# |120  | 78  | 170 | 1111000 | 'x' |
# |121  | 79  | 171 | 1111001 | 'y' |
# |122  | 7A  | 172 | 1111010 | 'z' |
# |123  | 7B  | 173 | 1111011 | '{' |
# |124  | 7C  | 174 | 1111100 | '|' |
# |125  | 7D  | 175 | 1111101 | '}' |
# |126  | 7E  | 176 | 1111110 | '~' |
# +-----+-----+-----+--------+------+

number=bytearray([109])
print(number) #output 'm'
number2=bytearray(b"Kafka")
print(number2)
#---------------------------------------------------------

surname=memoryview(bytes(b"Albert"))
print(surname)

#This code creates a memory view of the bytes representing the string "Albert". 
# A memoryview allows you to access and manipulate the byte data without copying it. 
# Printing it shows the memoryview object itself, not the actual content.
#--------------------------------------------------------------------